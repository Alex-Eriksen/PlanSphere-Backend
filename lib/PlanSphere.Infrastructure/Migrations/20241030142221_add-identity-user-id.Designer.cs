// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlanSphere.Infrastructure.Contexts;

#nullable disable

namespace PlanSphere.Infrastructure.Migrations
{
    [DbContext(typeof(PlanSphereDatabaseContext))]
    [Migration("20241030142221_add-identity-user-id")]
    partial class addidentityuserid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Door")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ParentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostalCode");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AddressId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CreatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrganisationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("UpdatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("VAT")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.Entities.CompanyBlockedJobTitle", b =>
                {
                    b.Property<decimal>("CompanyId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("JobTitleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("CompanyId", "JobTitleId");

                    b.HasIndex("JobTitleId")
                        .IsUnique();

                    b.ToTable("CompanyBlockedJobTitles");
                });

            modelBuilder.Entity("Domain.Entities.CompanyBlockedRole", b =>
                {
                    b.Property<decimal>("CompanyId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("CompanyId", "RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("CompanyBlockedRoles");
                });

            modelBuilder.Entity("Domain.Entities.CompanyJobTitle", b =>
                {
                    b.Property<decimal>("CompanyId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("JobTitleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsInheritanceActive")
                        .HasColumnType("bit");

                    b.HasKey("CompanyId", "JobTitleId");

                    b.HasIndex("JobTitleId")
                        .IsUnique();

                    b.ToTable("CompanyJobTitles");
                });

            modelBuilder.Entity("Domain.Entities.CompanyRole", b =>
                {
                    b.Property<decimal>("CompanyId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsInheritanceActive")
                        .HasColumnType("bit");

                    b.HasKey("CompanyId", "RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("CompanyRoles");
                });

            modelBuilder.Entity("Domain.Entities.CompanyRoleRight", b =>
                {
                    b.Property<decimal>("CompanyId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RightId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("CompanyId");

                    b.HasIndex("RightId");

                    b.HasIndex("RoleId");

                    b.ToTable("CompanyRoleRight");
                });

            modelBuilder.Entity("Domain.Entities.CompanySettings", b =>
                {
                    b.Property<decimal>("CompanyId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("DefaultRoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("DefaultWorkScheduleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("InheritDefaultWorkSchedule")
                        .HasColumnType("bit");

                    b.HasKey("CompanyId");

                    b.HasIndex("DefaultRoleId");

                    b.HasIndex("DefaultWorkScheduleId");

                    b.ToTable("CompanySettings");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<string>("IsoCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IsdCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IsoCode");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AddressId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CompanyId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CreatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InheritAddress")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("UpdatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Domain.Entities.DepartmentBlockedJobTitle", b =>
                {
                    b.Property<decimal>("DepartmentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("JobTitleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("DepartmentId", "JobTitleId");

                    b.HasIndex("JobTitleId")
                        .IsUnique();

                    b.ToTable("DepartmentBlockedJobTitles");
                });

            modelBuilder.Entity("Domain.Entities.DepartmentBlockedRole", b =>
                {
                    b.Property<decimal>("DepartmentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("DepartmentId", "RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("DepartmentBlockedRoles");
                });

            modelBuilder.Entity("Domain.Entities.DepartmentJobTitle", b =>
                {
                    b.Property<decimal>("DepartmentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("JobTitleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsInheritanceActive")
                        .HasColumnType("bit");

                    b.HasKey("DepartmentId", "JobTitleId");

                    b.HasIndex("JobTitleId")
                        .IsUnique();

                    b.ToTable("DepartmentJobTitles");
                });

            modelBuilder.Entity("Domain.Entities.DepartmentRole", b =>
                {
                    b.Property<decimal>("DepartmentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsInheritanceActive")
                        .HasColumnType("bit");

                    b.HasKey("DepartmentId", "RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("DepartmentRoles");
                });

            modelBuilder.Entity("Domain.Entities.DepartmentRoleRight", b =>
                {
                    b.Property<decimal>("DepartmentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RightId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("DepartmentId");

                    b.HasIndex("RightId");

                    b.HasIndex("RoleId");

                    b.ToTable("DepartmentRoleRight");
                });

            modelBuilder.Entity("Domain.Entities.DepartmentSettings", b =>
                {
                    b.Property<decimal>("DepartmentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("DefaultRoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("DefaultWorkScheduleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("InheritDefaultWorkSchedule")
                        .HasColumnType("bit");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DefaultRoleId");

                    b.HasIndex("DefaultWorkScheduleId");

                    b.ToTable("DepartmentSettings");
                });

            modelBuilder.Entity("Domain.Entities.JobTitle", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CreatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("UpdatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("Domain.Entities.Organisation", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AddressId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CreatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("UpdatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("Domain.Entities.OrganisationJobTitle", b =>
                {
                    b.Property<decimal>("OrganisationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("JobTitleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsInheritanceActive")
                        .HasColumnType("bit");

                    b.HasKey("OrganisationId", "JobTitleId");

                    b.HasIndex("JobTitleId")
                        .IsUnique();

                    b.ToTable("OrganisationJobTitles");
                });

            modelBuilder.Entity("Domain.Entities.OrganisationRole", b =>
                {
                    b.Property<decimal>("OrganisationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsInheritanceActive")
                        .HasColumnType("bit");

                    b.HasKey("OrganisationId", "RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("OrganisationRoles");
                });

            modelBuilder.Entity("Domain.Entities.OrganisationRoleRight", b =>
                {
                    b.Property<decimal>("OrganisationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RightId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("OrganisationId");

                    b.HasIndex("RightId");

                    b.HasIndex("RoleId");

                    b.ToTable("OrganisationRoleRight");
                });

            modelBuilder.Entity("Domain.Entities.OrganisationSettings", b =>
                {
                    b.Property<decimal>("OrganisationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("DefaultRoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("DefaultWorkScheduleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("OrganisationId");

                    b.HasIndex("DefaultRoleId");

                    b.HasIndex("DefaultWorkScheduleId");

                    b.ToTable("OrganisationSettings");
                });

            modelBuilder.Entity("Domain.Entities.Right", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Rights");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CreatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("UpdatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AddressId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CreatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("DepartmentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InheritAddress")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("UpdatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Domain.Entities.TeamBlockedJobTitle", b =>
                {
                    b.Property<decimal>("TeamId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("JobTitleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("TeamId", "JobTitleId");

                    b.HasIndex("JobTitleId")
                        .IsUnique();

                    b.ToTable("TeamBlockedJobTitles");
                });

            modelBuilder.Entity("Domain.Entities.TeamBlockedRole", b =>
                {
                    b.Property<decimal>("TeamId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("TeamId", "RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("TeamBlockedRoles");
                });

            modelBuilder.Entity("Domain.Entities.TeamJobTitle", b =>
                {
                    b.Property<decimal>("TeamId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("JobTitleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsInheritanceActive")
                        .HasColumnType("bit");

                    b.HasKey("TeamId", "JobTitleId");

                    b.HasIndex("JobTitleId")
                        .IsUnique();

                    b.ToTable("TeamJobTitles");
                });

            modelBuilder.Entity("Domain.Entities.TeamRole", b =>
                {
                    b.Property<decimal>("TeamId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsInheritanceActive")
                        .HasColumnType("bit");

                    b.HasKey("TeamId", "RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("TeamRoles");
                });

            modelBuilder.Entity("Domain.Entities.TeamRoleRight", b =>
                {
                    b.Property<decimal>("TeamId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RightId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("TeamId");

                    b.HasIndex("RightId");

                    b.HasIndex("RoleId");

                    b.ToTable("TeamRoleRight");
                });

            modelBuilder.Entity("Domain.Entities.TeamSettings", b =>
                {
                    b.Property<decimal>("TeamId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("DefaultRoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("DefaultWorkScheduleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("InheritDefaultWorkSchedule")
                        .HasColumnType("bit");

                    b.HasKey("TeamId");

                    b.HasIndex("DefaultRoleId");

                    b.HasIndex("DefaultWorkScheduleId");

                    b.ToTable("TeamSettings");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AddressId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CreatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrganisationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("UpdatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.UserSettings", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AutoCheckInOut")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoCheckOutDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("InheritWorkSchedule")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAddressPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBirthdayPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberPrivate")
                        .HasColumnType("bit");

                    b.Property<decimal>("WorkScheduleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("UserId");

                    b.HasIndex("WorkScheduleId")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Domain.Entities.WorkSchedule", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<bool>("IsDefaultWorkSchedule")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ParentId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("WorkSchedules");
                });

            modelBuilder.Entity("Domain.Entities.WorkScheduleShift", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int?>("Location")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<decimal>("WorkScheduleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("WorkScheduleId");

                    b.ToTable("WorkScheduleShifts");
                });

            modelBuilder.Entity("Domain.Entities.WorkTime", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime?>("ApprovalDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ApprovedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CreatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Location")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("UpdatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("WorkTimeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("WorkTimes");
                });

            modelBuilder.Entity("Domain.Entities.WorkTimeLog", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LoggedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("OldEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OldLocation")
                        .HasColumnType("int");

                    b.Property<DateTime>("OldStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OldWorkTimeType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("WorkTimeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoggedBy");

                    b.HasIndex("UserId");

                    b.ToTable("WorkTimeLogs");
                });

            modelBuilder.Entity("Domain.Entities.ZipCode", b =>
                {
                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostalCode");

                    b.HasIndex("CountryId");

                    b.ToTable("ZipCodes");
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Domain.Entities.Address", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Domain.Entities.ZipCode", "ZipCode")
                        .WithMany()
                        .HasForeignKey("PostalCode");

                    b.Navigation("Country");

                    b.Navigation("Parent");

                    b.Navigation("ZipCode");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Company", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organisation", "Organisation")
                        .WithMany("Companies")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Organisation");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Entities.CompanyBlockedJobTitle", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.JobTitle", "JobTitle")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.CompanyBlockedJobTitle", "JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("Domain.Entities.CompanyBlockedRole", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.CompanyBlockedRole", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.CompanyJobTitle", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.JobTitle", "JobTitle")
                        .WithOne("CompanyJobTitle")
                        .HasForeignKey("Domain.Entities.CompanyJobTitle", "JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("Domain.Entities.CompanyRole", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithOne("CompanyRole")
                        .HasForeignKey("Domain.Entities.CompanyRole", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.CompanyRoleRight", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Right", "Right")
                        .WithMany()
                        .HasForeignKey("RightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("CompanyRoleRights")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Right");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.CompanySettings", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithOne("Settings")
                        .HasForeignKey("Domain.Entities.CompanySettings", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "DefaultRole")
                        .WithMany()
                        .HasForeignKey("DefaultRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkSchedule", "DefaultWorkSchedule")
                        .WithMany()
                        .HasForeignKey("DefaultWorkScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("DefaultRole");

                    b.Navigation("DefaultWorkSchedule");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Department", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Entities.DepartmentBlockedJobTitle", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.JobTitle", "JobTitle")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.DepartmentBlockedJobTitle", "JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("Domain.Entities.DepartmentBlockedRole", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.DepartmentBlockedRole", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.DepartmentJobTitle", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.JobTitle", "JobTitle")
                        .WithOne("DepartmentJobTitle")
                        .HasForeignKey("Domain.Entities.DepartmentJobTitle", "JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("Domain.Entities.DepartmentRole", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithOne("DepartmentRole")
                        .HasForeignKey("Domain.Entities.DepartmentRole", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.DepartmentRoleRight", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Right", "Right")
                        .WithMany()
                        .HasForeignKey("RightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("DepartmentRoleRights")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Right");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.DepartmentSettings", b =>
                {
                    b.HasOne("Domain.Entities.Role", "DefaultRole")
                        .WithMany()
                        .HasForeignKey("DefaultRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkSchedule", "DefaultWorkSchedule")
                        .WithMany()
                        .HasForeignKey("DefaultWorkScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithOne("Settings")
                        .HasForeignKey("Domain.Entities.DepartmentSettings", "DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultRole");

                    b.Navigation("DefaultWorkSchedule");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.JobTitle", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Entities.Organisation", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Organisation", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Entities.OrganisationJobTitle", b =>
                {
                    b.HasOne("Domain.Entities.JobTitle", "JobTitle")
                        .WithOne("OrganisationJobTitle")
                        .HasForeignKey("Domain.Entities.OrganisationJobTitle", "JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTitle");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Domain.Entities.OrganisationRole", b =>
                {
                    b.HasOne("Domain.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithOne("OrganisationRole")
                        .HasForeignKey("Domain.Entities.OrganisationRole", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.OrganisationRoleRight", b =>
                {
                    b.HasOne("Domain.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Right", "Right")
                        .WithMany()
                        .HasForeignKey("RightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("OrganisationRoleRights")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("Right");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.OrganisationSettings", b =>
                {
                    b.HasOne("Domain.Entities.Role", "DefaultRole")
                        .WithMany()
                        .HasForeignKey("DefaultRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkSchedule", "DefaultWorkSchedule")
                        .WithMany()
                        .HasForeignKey("DefaultWorkScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organisation", "Organisation")
                        .WithOne("Settings")
                        .HasForeignKey("Domain.Entities.OrganisationSettings", "OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultRole");

                    b.Navigation("DefaultWorkSchedule");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Team", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("Teams")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Department");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Entities.TeamBlockedJobTitle", b =>
                {
                    b.HasOne("Domain.Entities.JobTitle", "JobTitle")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.TeamBlockedJobTitle", "JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTitle");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Entities.TeamBlockedRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.TeamBlockedRole", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Entities.TeamJobTitle", b =>
                {
                    b.HasOne("Domain.Entities.JobTitle", "JobTitle")
                        .WithOne("TeamJobTitle")
                        .HasForeignKey("Domain.Entities.TeamJobTitle", "JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTitle");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Entities.TeamRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithOne("TeamRole")
                        .HasForeignKey("Domain.Entities.TeamRole", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Entities.TeamRoleRight", b =>
                {
                    b.HasOne("Domain.Entities.Right", "Right")
                        .WithMany()
                        .HasForeignKey("RightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("TeamRoleRights")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Right");

                    b.Navigation("Role");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Entities.TeamSettings", b =>
                {
                    b.HasOne("Domain.Entities.Role", "DefaultRole")
                        .WithMany()
                        .HasForeignKey("DefaultRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkSchedule", "DefaultWorkSchedule")
                        .WithMany()
                        .HasForeignKey("DefaultWorkScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Team", "Team")
                        .WithOne("Settings")
                        .HasForeignKey("Domain.Entities.TeamSettings", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultRole");

                    b.Navigation("DefaultWorkSchedule");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.User", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Organisation");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserSettings", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("Domain.Entities.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkSchedule", "WorkSchedule")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.UserSettings", "WorkScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkSchedule");
                });

            modelBuilder.Entity("Domain.Entities.WorkSchedule", b =>
                {
                    b.HasOne("Domain.Entities.WorkSchedule", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.WorkScheduleShift", b =>
                {
                    b.HasOne("Domain.Entities.WorkSchedule", "WorkSchedule")
                        .WithMany("WorkScheduleShifts")
                        .HasForeignKey("WorkScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkSchedule");
                });

            modelBuilder.Entity("Domain.Entities.WorkTime", b =>
                {
                    b.HasOne("Domain.Entities.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("WorkTimes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.WorkTimeLog", b =>
                {
                    b.HasOne("Domain.Entities.User", "LoggedByUser")
                        .WithMany()
                        .HasForeignKey("LoggedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LoggedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ZipCode", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Domain.Entities.JobTitle", b =>
                {
                    b.Navigation("CompanyJobTitle");

                    b.Navigation("DepartmentJobTitle");

                    b.Navigation("OrganisationJobTitle");

                    b.Navigation("TeamJobTitle");
                });

            modelBuilder.Entity("Domain.Entities.Organisation", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("CompanyRole");

                    b.Navigation("CompanyRoleRights");

                    b.Navigation("DepartmentRole");

                    b.Navigation("DepartmentRoleRights");

                    b.Navigation("OrganisationRole");

                    b.Navigation("OrganisationRoleRights");

                    b.Navigation("TeamRole");

                    b.Navigation("TeamRoleRights");
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("WorkTimes");
                });

            modelBuilder.Entity("Domain.Entities.WorkSchedule", b =>
                {
                    b.Navigation("WorkScheduleShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
